from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import re
import time
from tkinter import Tk, filedialog
from concurrent.futures import ThreadPoolExecutor

# Speed settings
PAGE_LOAD_TIMEOUT = 8  # Reduced from 10 seconds
ACTION_DELAY = 1       # Reduced from 1.5 seconds
BETWEEN_ACCOUNTS_DELAY = 1.5  # Reduced from 3 seconds

def setup_driver():
    """Setup WebDriver with optimized options"""
    chrome_options = Options()
    chrome_options.add_argument("--disable-notifications")
    chrome_options.add_argument("--disable-popup-blocking")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option("useAutomationExtension", False)

    # Enable headless mode to avoid loading GUI
    chrome_options.add_argument("--headless")

    driver = webdriver.Chrome(options=chrome_options)
    driver.set_page_load_timeout(PAGE_LOAD_TIMEOUT)
    return driver

def process_account(driver, cookie, account_num, all_user_ids):
    """Login and send friend requests"""
    try:
        driver.get('https://www.roblox.com/login')
        WebDriverWait(driver, PAGE_LOAD_TIMEOUT).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))
        driver.delete_all_cookies()
        driver.add_cookie({'name': '.ROBLOSECURITY', 'value': cookie, 'domain': '.roblox.com'})

        driver.get('https://www.roblox.com/users/profile')
        WebDriverWait(driver, PAGE_LOAD_TIMEOUT).until(EC.url_contains("users/"))
        user_id = re.search(r'users/(\d+)/profile', driver.current_url).group(1)

        print(f"[Account {account_num}] Logged in successfully: User ID {user_id}")

        # Send friend requests
        for target_id in all_user_ids:
            if target_id != user_id:
                driver.get(f'https://www.roblox.com/users/{target_id}/profile')
                try:
                    button = WebDriverWait(driver, 3).until(
                        EC.element_to_be_clickable((By.XPATH, '//button[contains(.,"Add Friend") or contains(.,"Accept")]'))
                    )
                    button.click()
                    print(f"  âœ“ Friend request sent to {target_id}")
                    time.sleep(ACTION_DELAY)  # Reduced action delay
                except:
                    pass  # No need to log error if button not found
    
    except Exception as e:
        print(f"[Account {account_num}] Error: {str(e)}")

def main():
    root = Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename(title="Select cookies.txt file")
    if not file_path:
        print("No file selected.")
        return

    with open(file_path, 'r') as f:
        cookies = [line.strip() for line in f if line.startswith('_|WARNING:-DO-NOT-SHARE-THIS.')]

    if not cookies:
        print("No valid cookies found.")
        return

    print(f"\nFound {len(cookies)} accounts in the file.")

    user_ids = []
    driver = setup_driver()

    print("\nRetrieving User IDs...")
    for i, cookie in enumerate(cookies, 1):
        try:
            driver.get('https://www.roblox.com/home')
            driver.delete_all_cookies()
            driver.add_cookie({'name': '.ROBLOSECURITY', 'value': cookie, 'domain': '.roblox.com'})
            driver.get('https://www.roblox.com/users/profile')
            WebDriverWait(driver, PAGE_LOAD_TIMEOUT).until(EC.url_contains("users/"))
            user_id = re.search(r'users/(\d+)/profile', driver.current_url).group(1)
            user_ids.append(user_id)
            print(f"[Account {i}] User ID: {user_id}")
        except Exception as e:
            print(f"[Account {i}] Failed to retrieve User ID: {str(e)}")
    
    print("\nStarting friend request process...")

    # Use ThreadPoolExecutor for concurrent account processing
    with ThreadPoolExecutor(max_workers=5) as executor:  # Set max_workers to 5
        for i, cookie in enumerate(cookies, 1):
            executor.submit(process_account, setup_driver(), cookie, i, user_ids)
            time.sleep(BETWEEN_ACCOUNTS_DELAY)  # Delay between accounts

    driver.quit()
    print("\nProcess complete.")

if __name__ == "__main__":
    main()
